set(ENGINE_DIR ${ROOT_DIR}/Engine)

include(${ROOT_DIR}/CMake/Preprocessor.cmake)
include(${ROOT_DIR}/CMake/Platform.cmake)
include(${ROOT_DIR}/CMake/IncludeDirs.cmake)
include(${ROOT_DIR}/CMake/LinkDirs.cmake)
include(${ROOT_DIR}/CMake/BuildOptions.cmake)
include(${ROOT_DIR}/CMake/ExternalTools.cmake)
include(${ROOT_DIR}/CMake/editor/PreprocessorEditor.cmake)
include(${ROOT_DIR}/CMake/editor/IncludeDirsEditor.cmake)

function(setup_source_files target unity_conf_dir is_library)
    message("Configuring ${target} source files...")
    if("${unity_conf_dir}" STREQUAL "")
        message("-- Unity build disabled.\n")
        file(GLOB_RECURSE SOURCE src/*.cpp src/*.h)
        file(GLOB_RECURSE OBJC_SOURCE src/*.mm)
        set(TARGET_SOURCE ${SOURCE} ${OBJC_SOURCE})
    else()
        message("-- Unity build enabled.")
        get_filename_component(ABSOLUTE_PATH ${ROOT_DIR}/Build/ ABSOLUTE)
        execute_process(COMMAND ${PYTHON_EXE} UnityBatcher.py ${unity_conf_dir} ${PLATFORM} WORKING_DIRECTORY ${ABSOLUTE_PATH})

        file(GLOB SOURCE ./unity_generated/*.cpp)
        file(GLOB OBJC_SOURCE ./unity_generated/*.mm)
        file(GLOB_RECURSE NON_UNITY_SOURCE src/*.cpp src/*.h src/*.mm)
        source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${NON_UNITY_SOURCE})

        ###### Add non Unity files for visualisation in VS and Xcode ######
        if (CMAKE_GENERATOR MATCHES "Visual Studio")
            set_property(SOURCE ${NON_UNITY_SOURCE} PROPERTY VS_SETTINGS "ExcludedFromBuild=true")
            set(TARGET_SOURCE ${SOURCE} ${OBJC_SOURCE} ${NON_UNITY_SOURCE})
        else()
            add_custom_target("${target}_Source_Files" SOURCES ${NON_UNITY_SOURCE})
            set(TARGET_SOURCE ${SOURCE} ${OBJC_SOURCE})
        endif()
    endif()

    if (${is_library})
        message("Adding library: ${target}\n")
        add_library(${target} ${TARGET_SOURCE})
    else()
        message("Adding executable: ${target}\n")
        add_executable(${target} ${TARGET_SOURCE})
    endif()
    set_target_properties(${target} PROPERTIES EXCLUDE_FROM_ALL TRUE)
endfunction()

function(setup_spark_target target is_library use_editor unity_conf_dir)
    include_directories(src)
    include_directories(sht_generated)
    setup_source_files(${target} "${unity_conf_dir}" ${is_library})
    setup_compile_options(${target})
    if(NOT CMAKE_CONFIGURATION_TYPES)
        add_dependencies(${target} ${REGEN_CMAKE_TARGET})
    endif()

    include(${ROOT_DIR}/CMake/Linker.cmake)
    include(${ROOT_DIR}/CMake/editor/LinkerEditor.cmake)
    include(${ROOT_DIR}/CMake/PCH.cmake)

    #enable parallel std::for_each
    if (${PLATFORM} MATCHES Linux)
        find_package(TBB REQUIRED COMPONENTS tbb)
        target_link_libraries(${target} tbb)
    endif()
endfunction()