set(ENGINE_DIR ${ROOT_DIR}/Engine)

include(${ROOT_DIR}/CMake/Preprocessor.cmake)
include(${ROOT_DIR}/CMake/Platform.cmake)
include(${ROOT_DIR}/CMake/IncludeDirs.cmake)
include(${ROOT_DIR}/CMake/LinkDirs.cmake)
include(${ROOT_DIR}/CMake/BuildOptions.cmake)
include(${ROOT_DIR}/CMake/ExternalTools.cmake)
include(${ROOT_DIR}/CMake/editor/PreprocessorEditor.cmake)
include(${ROOT_DIR}/CMake/editor/IncludeDirsEditor.cmake)

function(exclude_files_from_vs files)
    set_property(SOURCE ${files} PROPERTY VS_SETTINGS "ExcludedFromBuild=true")
endfunction()

function(apply_xcode_exclude_attribute target files config)
    get_property(current_value TARGET ${target} PROPERTY XCODE_ATTRIBUTE_EXCLUDED_SOURCE_FILE_NAMES[variant=${config}])
    if(current_value)
        set_property(TARGET ${target} PROPERTY XCODE_ATTRIBUTE_EXCLUDED_SOURCE_FILE_NAMES[variant=${config}] "${current_value}, ${files}")
    else()
        set_property(TARGET ${target} PROPERTY XCODE_ATTRIBUTE_EXCLUDED_SOURCE_FILE_NAMES[variant=${config}] "${files}")
    endif()

endfunction()

function(exclude_files_from_xcode_variant target files config)
    foreach(file in ${files})
        get_filename_component(filename ${file} NAME)
        if (NOT ${filename} STREQUAL "" AND NOT ${filename} STREQUAL "in")
            if (NOT DEFINED excluded_src)
                set(excluded_src "${filename}")
            else()
                set(excluded_src "${excluded_src} ${filename}")
            endif()
        endif()
    endforeach()

    apply_xcode_exclude_attribute(${target} ${excluded_src} ${config})
endfunction()

function(exclude_files_from_xcode target files)
    foreach(file in ${files})
        get_filename_component(filename ${file} NAME)
        if (NOT ${filename} STREQUAL "" AND NOT ${filename} STREQUAL "in")
            if (NOT DEFINED excluded_src)
                set(excluded_src "${filename}")
            else()
                set(excluded_src "${excluded_src} ${filename}")
            endif()
        endif()
    endforeach()

    apply_xcode_exclude_attribute(${target} ${excluded_src} Debug)
    apply_xcode_exclude_attribute(${target} ${excluded_src} DebugEditor)
    apply_xcode_exclude_attribute(${target} ${excluded_src} Release)
    apply_xcode_exclude_attribute(${target} ${excluded_src} ReleaseEditor)
    apply_xcode_exclude_attribute(${target} ${excluded_src} Distribution)
    apply_xcode_exclude_attribute(${target} ${excluded_src} DistributionEditor)
endfunction()

function(setup_source_files target unity_conf_dir is_library)
    message(STATUS "Configuring ${target} source files...")
    if("${unity_conf_dir}" STREQUAL "")
        set(unity_build FALSE)
        message(STATUS "-- Unity build disabled.\n")
        file(GLOB_RECURSE SOURCE src/*.cpp src/*.h sht_generated/*.cpp sht_generated/*.h)
        file(GLOB_RECURSE OBJC_SOURCE src/*.mm)
        set(TARGET_SOURCE ${SOURCE} ${OBJC_SOURCE})
    else()
        set(unity_build TRUE)
        message(STATUS "-- Unity build enabled.")
        get_filename_component(ABSOLUTE_PATH ${ROOT_DIR}/Build/ ABSOLUTE)
        execute_process(COMMAND ${PYTHON_EXE} UnityBatcher.py ${unity_conf_dir} ${PLATFORM} WORKING_DIRECTORY ${ABSOLUTE_PATH})

        file(GLOB SOURCE unity_generated/*.cpp sht_generated/*.cpp sht_generated/*.h)
        file(GLOB OBJC_SOURCE unity_generated/*.mm)
        file(GLOB_RECURSE NON_UNITY_SOURCE src/*.cpp src/*.h src/*.mm)
        source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${NON_UNITY_SOURCE})

        if (CMAKE_CONFIGURATION_TYPES)
            # add all files for visibility, non unity sources will be excluded below
            set(TARGET_SOURCE ${SOURCE} ${OBJC_SOURCE} ${NON_UNITY_SOURCE})
        else()
            set(TARGET_SOURCE ${SOURCE} ${OBJC_SOURCE})
        endif()
    endif()

    if (${is_library})
        message(STATUS "Adding library: ${target}\n")
        add_library(${target} ${TARGET_SOURCE})
    else()
        message(STATUS "Adding executable: ${target}\n")
        add_executable(${target} ${TARGET_SOURCE})
    endif()
    set_target_properties(${target} PROPERTIES EXCLUDE_FROM_ALL TRUE)

    # remove all non unity files from the build
    if (${unity_build})
        exclude_files_from_vs(${NON_UNITY_SOURCE})

        if (CMAKE_GENERATOR MATCHES "Xcode")
            exclude_files_from_xcode(${target} "${NON_UNITY_SOURCE}")

            #make sure we exclude all editor source from non editor builds.
            if(${target} MATCHES Editor)
                if(SOURCE)
                    exclude_files_from_xcode_variant(${target} "${SOURCE}" Debug)
                    exclude_files_from_xcode_variant(${target} "${SOURCE}" Release)
                    exclude_files_from_xcode_variant(${target} "${SOURCE}" Distribution)
                endif()

                if(OBJC_SOURCE)
                    exclude_files_from_xcode_variant(${target} "${OBJC_SOURCE}" Debug)
                    exclude_files_from_xcode_variant(${target} "${OBJC_SOURCE}" Release)
                    exclude_files_from_xcode_variant(${target} "${OBJC_SOURCE}" Distribution)
                endif()
            endif()
        endif()
    endif()

endfunction()

function(setup_target_common target is_library unity_conf_dir)
    include_directories(src)
    include_directories(sht_generated)
    setup_source_files(${target} "${unity_conf_dir}" ${is_library})
    setup_compile_options(${target})

    if(NOT CMAKE_CONFIGURATION_TYPES)
        add_dependencies(${target} ${REGEN_CMAKE_TARGET})
    endif()

    if (NOT ${is_library} AND ${PLATFORM} MATCHES Mac)
        set_target_properties(${target} PROPERTIES MACOSX_BUNDLE TRUE)
    endif()

    #enable parallel std::for_each
    if (${PLATFORM} MATCHES Linux)
        find_package(TBB REQUIRED COMPONENTS tbb)
        target_link_libraries(${target} tbb)
    endif()
endfunction()

function(setup_spark_target target is_library unity_conf_dir)
    setup_target_common(${target} ${is_library} "${unity_conf_dir}")

    include(${ROOT_DIR}/CMake/Linker.cmake)
    include(${ROOT_DIR}/CMake/editor/LinkerEditor.cmake)
    include(${ROOT_DIR}/CMake/PCH.cmake)
endfunction()