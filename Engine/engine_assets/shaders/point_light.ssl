SSL_FRAGMENT

setting int numLights;

port(FinalFragColor) in vec4 inColor;
port(VertexCameraNormal) in vec3 normCameraSpace;
port(FragUV) in vec2 UV;
port(VertexWorldPos) in vec3 posCameraSpace;
port(CameraEyeDir) in vec3 eyeDirCameraSpace;
port(CameraLightDir) in vec3[numLights] lightDirCameraSpace;

port(FinalFragColor) out vec4 color;

uniform mat4 model;
uniform mat4 view;
uniform vec3 lightPos[numLights];
uniform vec3 lightColor[numLights];

void main()
{
    mat4 MV = view * model;

    float LightPower = 50.0f;

    vec4 MaterialDiffuseColor = inColor;
    vec4 ambientStr = vec4(0.1, 0.1, 0.1, 1.0);
    vec4 MaterialAmbientColor = ambientStr * MaterialDiffuseColor;
    vec4 MaterialSpecularColor = vec4(0.3, 0.3, 0.3, 1.0);

    color = MaterialAmbientColor;

    vec3 n = normalize(normCameraSpace);
    vec3 E = normalize(eyeDirCameraSpace);
    for (int i = 0; i < numLights; i += 1)
    {
        float distance = length(lightPos[i] - posCameraSpace);
        vec3 l = normalize(lightDirCameraSpace[i]);
        float cosTheta = clamp(dot(n, l), 0.0, 1.0);
        vec3 R = reflect(-l, n);
        float cosAlpha = clamp(dot(E, R), 0.0, 1.0);

        float distSq = distance * distance;
        color += MaterialDiffuseColor * vec4(lightColor[i], 1.0) * LightPower * cosTheta / distSq +
                 MaterialSpecularColor * vec4(lightColor[i], 1.0) * LightPower * pow(cosAlpha, 5) / distSq;
    }
}