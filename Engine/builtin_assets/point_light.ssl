port(test) in vec3 inColor;

port(Frag_InCameraNormal) in vec3 normCameraSpace;
port(Frag_InUV) in vec2 UV;
port(Frag_InWorldPos) in vec3 posCameraSpace;
port(Frag_InCameraEyeDir) in vec3 eyeDirCameraSpace;
port(Frag_InCameraLightDir) in vec3 lightDirCameraSpace;

port(Frag_OutColour) out vec3 color;

uniform mat4 model;
uniform mat4 view;
uniform vec3 lightPos;

void main()
{
    mat4 MV = view * model;

    vec3 LightColor = vec3(1, 1, 1);
    float LightPower = 50.0f;

    vec3 MaterialDiffuseColor = inColor;
    vec3 ambientStr = vec3(0.1, 0.1, 0.1);
    vec3 MaterialAmbientColor = ambientStr * MaterialDiffuseColor;
    vec3 MaterialSpecularColor = vec3(0.3, 0.3, 0.3);

    float distance = length(lightPos - posCameraSpace);

    vec3 n = normalize(normCameraSpace);
    vec3 l = normalize(lightDirCameraSpace);
    float cosTheta = clamp(dot(n, l), 0, 1);

    vec3 E = normalize(eyeDirCameraSpace);
    vec3 R = reflect(-l, n);
    float cosAlpha = clamp(dot(E, R), 0, 1);

    float distSq = distance * distance;
    color =
        MaterialAmbientColor +
        MaterialDiffuseColor * LightColor * LightPower * cosTheta / distSq +
        MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha, 5) / distSq;
}